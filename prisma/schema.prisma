// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int     @id @default(autoincrement())
  title       String
  price       Float
  description String
  image       String?
  isArchive   Boolean @default(false)

  rating           Rating?
  carts            Cart[]
  categoryxproduct Categoryxproduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id               Int                @id @default(autoincrement())
  name             String
  isArchive        Boolean            @default(false)
  categoryxproduct Categoryxproduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Categoryxproduct {
  id        Int     @id @default(autoincrement())
  isArchive Boolean @default(false)

  categories Category @relation(fields: [categoryId], references: [id])
  products   Product  @relation(fields: [productId], references: [id])
  categoryId Int
  productId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Rating {
  id        Int     @id @default(autoincrement())
  rate      Float
  count     Int
  productId Int     @unique
  isArchive Boolean @default(false)

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Customer {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  image     String?
  password  String
  isArchive Boolean @default(false)

  carts Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cart {
  id         Int     @id @default(autoincrement())
  quantity   Int     @default(1)
  totalPrice Float
  isArchive  Boolean @default(false)

  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  productId  Int
  customerId Int
  orderId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id        Int     @id @default(autoincrement())
  status    String
  isArchive Boolean @default(false)
  cart      Cart[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Test {
  id    Int     @id @default(autoincrement())
  name  String?
  email String  @default("h-e-l-l-o")
}
